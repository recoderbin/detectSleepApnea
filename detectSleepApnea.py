# -*- coding: utf-8 -*-
"""Untitled34.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mCdQ4h1G-C1n6m5m1rgIEiJi3CqYeISU
"""

!pip install kaggle

from google.colab import files
files.upload()

import pandas as pd
data_train = pd.read_csv('/content/Sleep_health_and_lifestyle_dataset.csv')
print(data_train)

data_train = data_train.drop(columns=["Person ID"])

X = data_train.drop(columns=["Sleep Disorder"])
y = data_train["Sleep Disorder"]

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

print("클래스 목록:", label_encoder.classes_)
print("인코딩 결과:", y_encoded[:10])

from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer

categorical_features = ["Gender", "Occupation", "BMI Category", "Blood Pressure"]
numerical_features = [col for col in X.columns if col not in categorical_features]


preprocessor = ColumnTransformer(transformers=[
    ("num", StandardScaler(), numerical_features),
    ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features)
])

X_processed = preprocessor.fit_transform(X)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X_processed, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
)

import tensorflow as tf

model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')  # 클래스 수: 3개
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(X_train, y_train, validation_split=0.2, epochs=30, batch_size=16, verbose=1)

# Save the model to a file
model.save('sleep_expect_model_.h5')

# Download the saved model file
from google.colab import files
files.download('sleep_expect_model_.h5') # 파일 이름에 맞게 수정 (확장자 변경)

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
import tensorflow as tf

# 1. 데이터 불러오기 및 전처리
data = pd.read_csv('/content/Sleep_health_and_lifestyle_dataset.csv')
data = data.drop(columns=["Person ID"])

X = data.drop(columns=["Sleep Disorder"])
y = data["Sleep Disorder"]

# 2. 타깃 라벨 인코딩
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# 3. 입력 데이터 전처리 (수치형: 정규화, 범주형: 원-핫 인코딩)
categorical_features = ["Gender", "Occupation", "BMI Category", "Blood Pressure"]
numerical_features = [col for col in X.columns if col not in categorical_features]

preprocessor = ColumnTransformer(transformers=[
    ("num", StandardScaler(), numerical_features),
    ("cat", OneHotEncoder(handle_unknown="ignore"), categorical_features)
])

X_processed = preprocessor.fit_transform(X)

# 4. 학습/테스트 데이터 분리
X_train, X_test, y_train, y_test = train_test_split(
    X_processed, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
)

# 5. 딥러닝 모델 구성 및 학습
model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')  # 클래스 3개
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(
    X_train, y_train,
    validation_split=0.2,
    epochs=30,
    batch_size=16,
    verbose=1
)

weight = int(input("체중을 입력하세요(kg)"))
height = int(input("키를 입력하세요(cm)")) / 100
bmi = weight / (height**2)

print("당신의 BMI 값은 {:.2f}입니다.".format(bmi))

if bmi < 18.5:
    print("Underweight")
elif 18.5 <= bmi < 23:
    print("Normal weight")
elif 23 <= bmi < 25:
    print("Overweight")
else:
    print("Obese")

import numpy as np
import pandas as pd

def get_user_input():
    user_input = {
        "Gender": input("성별을 입력하세요 (Male/Female): "),
        "Age": int(input("나이를 입력하세요 (예: 30): ")),
        "Occupation": input("직업을 입력하세요 (예: Doctor, Engineer 등): "),
        "Sleep Duration": float(input("수면 시간(시간)을 입력하세요 (예: 6.5): ")),
        "Quality of Sleep": int(input("수면의 질 (1~10 사이 숫자): ")),
        "Physical Activity Level": int(input("신체 활동 수준 (0~100): ")),
        "Stress Level": int(input("스트레스 수준 (1~10): ")),
        "BMI Category": input("BMI 상태 (Underweight/Normal/Overweight/Obese): "),
        "Blood Pressure": input("혈압을 입력하세요 (예: 120/80): "),
        "Heart Rate": int(input("심박수 (예: 70): ")),
        "Daily Steps": int(input("하루 걸음 수 (예: 8000): "))
    }
    return pd.DataFrame([user_input])


def give_advice(user_df):
    advice = []

    if user_df["Stress Level"].iloc[0] >= 8:
        advice.append("스트레스 수치가 매우 높습니다. 명상, 운동, 충분한 수면 등으로 스트레스를 줄이세요.")

    if user_df["Sleep Duration"].iloc[0] < 6:
        advice.append("수면 시간이 부족합니다. 하루 최소 7시간 수면을 권장합니다.")
    elif user_df["Sleep Duration"].iloc[0] > 9:
        advice.append("수면 시간이 과도할 수 있습니다. 피로감의 원인을 점검해보세요.")

    if user_df["Quality of Sleep"].iloc[0] <= 4:
        advice.append("수면의 질이 낮습니다. 자기 전 스마트폰 사용을 줄이고 편안한 환경을 만들어보세요.")

    if user_df["Physical Activity Level"].iloc[0] < 20:
        advice.append("신체 활동이 매우 적습니다. 가벼운 운동이라도 꾸준히 시도해보세요.")

    bmi_category = user_df["BMI Category"].iloc[0]
    if bmi_category in ["Overweight", "Obese"]:
        advice.append(" 과체중입니다. 식단과 운동으로 체중을 관리하는 것이 좋습니다.")

    try:
        bp = user_df["Blood Pressure"].iloc[0]
        systolic = int(bp.split("/")[0])
        if systolic >= 140:
            advice.append(" 고혈압 위험이 있습니다. 염분 섭취를 줄이고 건강한 식습관을 유지하세요.")
    except:
        advice.append("혈압 형식이 올바르지 않습니다. 예: 120/80")

    hr = user_df["Heart Rate"].iloc[0]
    if hr < 50 or hr > 100:
        advice.append("심박수가 정상 범위를 벗어났습니다. 상태를 점검해보세요.")

    steps = user_df["Daily Steps"].iloc[0]
    if steps < 5000:
        advice.append("하루 걸음 수가 부족합니다. 가능한 한 많이 걸으세요. (권장: 7000~10000보)")

    return advice


user_df = get_user_input()


user_processed = preprocessor.transform(user_df)
user_pred_probs = model.predict(user_processed)
user_pred_class = np.argmax(user_pred_probs, axis=1)
predicted_label = label_encoder.inverse_transform(user_pred_class)


print(f"\n예측된 수면 장애 유형: {predicted_label[0]}")


print("\n건강 정보 기반 조언:")
advice_list = give_advice(user_df)
if advice_list:
    for tip in advice_list:
        print("-", tip)
else:
    print("현재 입력한 정보에서는 특별한 개선이 필요해 보이지 않습니다!")

import numpy as np
import pandas as pd

def get_user_input():
    user_input = {
        "Gender": input("성별을 입력하세요 (Male/Female): "),
        "Age": int(input("나이를 입력하세요 (예: 30): ")),
        "Occupation": input("직업을 입력하세요 (예: Doctor, Engineer 등): "),
        "Sleep Duration": float(input("수면 시간(시간)을 입력하세요 (예: 6.5): ")),
        "Quality of Sleep": int(input("수면의 질 (1~10 사이 숫자): ")),
        "Physical Activity Level": int(input("신체 활동 수준 (0~100): ")),
        "Stress Level": int(input("스트레스 수준 (1~10): ")),
        "BMI Category": input("BMI 상태 (Underweight/Normal/Overweight/Obese): "),
        "Blood Pressure": input("혈압을 입력하세요 (예: 120/80): "),
        "Heart Rate": int(input("심박수 (예: 70): ")),
        "Daily Steps": int(input("하루 걸음 수 (예: 8000): "))
    }
    return pd.DataFrame([user_input])


def give_advice(user_df):
    advice = []

    if user_df["Stress Level"].iloc[0] >= 8:
        advice.append("스트레스 수치가 매우 높습니다. 명상, 운동, 충분한 수면 등으로 스트레스를 줄이세요.")

    if user_df["Sleep Duration"].iloc[0] < 6:
        advice.append("수면 시간이 부족합니다. 하루 최소 7시간 수면을 권장합니다.")
    elif user_df["Sleep Duration"].iloc[0] > 9:
        advice.append("수면 시간이 과도할 수 있습니다. 피로감의 원인을 점검해보세요.")

    if user_df["Quality of Sleep"].iloc[0] <= 4:
        advice.append("수면의 질이 낮습니다. 자기 전 스마트폰 사용을 줄이고 편안한 환경을 만들어보세요.")

    if user_df["Physical Activity Level"].iloc[0] < 20:
        advice.append("신체 활동이 매우 적습니다. 가벼운 운동이라도 꾸준히 시도해보세요.")

    bmi_category = user_df["BMI Category"].iloc[0]
    if bmi_category in ["Overweight", "Obese"]:
        advice.append(" 과체중입니다. 식단과 운동으로 체중을 관리하는 것이 좋습니다.")

    try:
        bp = user_df["Blood Pressure"].iloc[0]
        systolic = int(bp.split("/")[0])
        if systolic >= 140:
            advice.append(" 고혈압 위험이 있습니다. 염분 섭취를 줄이고 건강한 식습관을 유지하세요.")
    except:
        advice.append("혈압 형식이 올바르지 않습니다. 예: 120/80")

    hr = user_df["Heart Rate"].iloc[0]
    if hr < 50 or hr > 100:
        advice.append("심박수가 정상 범위를 벗어났습니다. 상태를 점검해보세요.")

    steps = user_df["Daily Steps"].iloc[0]
    if steps < 5000:
        advice.append("하루 걸음 수가 부족합니다. 가능한 한 많이 걸으세요. (권장: 7000~10000보)")

    return advice


user_df = get_user_input()


user_processed = preprocessor.transform(user_df)
user_pred_probs = model.predict(user_processed)
user_pred_class = np.argmax(user_pred_probs, axis=1)
predicted_label = label_encoder.inverse_transform(user_pred_class)


print(f"\n예측된 수면 장애 유형: {predicted_label[0]}")


print("\n건강 정보 기반 조언:")
advice_list = give_advice(user_df)
if advice_list:
    for tip in advice_list:
        print("-", tip)
else:
    print("현재 입력한 정보에서는 특별한 개선이 필요해 보이지 않습니다!")

import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf

# 1. 데이터 불러오기
data = pd.read_csv('/content/Sleep_health_and_lifestyle_dataset.csv')

# 2. 불필요한 열 제거
data = data.drop(columns=["Person ID"])

# 3. 입력(X), 출력(y) 분리
X = data.drop(columns=["Sleep Disorder"])
y = data["Sleep Disorder"]

# 4. 타깃 변수 Label Encoding
label_encoder_y = LabelEncoder()
y_encoded = label_encoder_y.fit_transform(y)
print("Sleep Disorder 클래스:", label_encoder_y.classes_)

# 5. 범주형 변수 Label Encoding
categorical_features = ["Gender", "Occupation", "BMI Category", "Blood Pressure"]
label_encoders = {}

for col in categorical_features:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
    label_encoders[col] = le  # 나중에 디코딩할 수도 있음
    print(f"{col} 클래스:", le.classes_)

# 6. 수치형 데이터 스케일링
numerical_features = [col for col in X.columns if col not in categorical_features]
scaler = StandardScaler()
X[numerical_features] = scaler.fit_transform(X[numerical_features])

# 7. 훈련/테스트 데이터 분리
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
)

# 8. 딥러닝 모델 정의
model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')  # 클래스 수: 3개
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 9. 모델 학습
history = model.fit(X_train, y_train, validation_split=0.2, epochs=30, batch_size=16, verbose=1)